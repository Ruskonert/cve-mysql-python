# -*- coding: utf-8 -*-
import util
import sys
import os
import cvemitre
import nvdnist
import platform
import zipfile
import getpass
import pymysql

from database import MySqlBase
export_file = {'--csv':'csv', '--db':'sql'}
thread_count = 4

class CommandException(Exception):
    """ 올바르지 않은 명령어를 입력했을 때 발생하는 예외 처리입니다. """
    def __init__(self, error):
        super().__init__(error)


def initialize(user, password, host, port, char="utf8"):
    if password is None:
        password = getpass.getpass('Please input your password {u}@{h} > '.format(u=user, h=host))
    database = MySqlBase(user, password, host, port)
    database.connect()
    return database


def configure_task(base, table_name, year, output_name=None, output_type="sql", specific_type=None):
    directory = {"year":year, "output_type": output_type, "table_name":table_name, "output_name":output_name, "specific_type": specific_type}
    filepath, collection = base.load(directory)
    base.use_database(base.database)
    base.table_insert(table_name, collection)
    base.save()
    return filepath

def help(error=None):
    print('')
    print("Using command: python cvemysql.py [-u user] [-p password] [-y year] [output_name] [--cofigurations] ...")
    print('')

    print('Requiremenet arguements:')
    print('[-y year] Select year(s)')
    print('')

    print('Option arguments:')
    print('[-u user] [-p password] [-i ip] [-port] [-t tablename] [-d dbname] [-c content] [-port]')
    print('')

    print('Configuration arguements:')
    print('[--year-all] [--csv] [--db]')
    print('')
    print('More description? https://github.com/Ruskonert/cve-mysql-python')
    print('')

    if error is not None:
        raise CommandException(error)

if __name__ == "__main__":
    # 대상이 되는 연도 리스트
    list_year = []

    # 출력 파일 확장자 리스트
    output_filetype = []
    
    # 프로그램 인자값, 출력 파일명
    argv, filename =  util.disting_args(sys.argv[1:], '--all', '--year-all', '--csv', '--db')

    # 구성 인자값 식별
    all_years = util.define_argument_value(argv, "--all-year", False)
    all_source = util.define_argument_value(argv, "--all",  False)

    csv_output = util.define_argument_value(argv, "--csv", False)
    sql_output = util.define_argument_value(argv, "--db", False)

    # 계정 인자값 식별
    user = util.define_argument_value(argv, "-user", flag="-u")
    password = util.define_argument_value(argv, "-password", flag="-p")
    host = util.define_argument_value(argv, "-ip", flag="-i")
    port = util.define_argument_value(argv, "-port")
    content_type = util.define_argument_value(argv, "-content", flag="-c")

    # 데이터베이스 이름 식별
    database_name = util.define_argument_value(argv, "-dbname", flag="-d")
    table_name = util.define_argument_value(argv, "-tablename", flag="-t")

    thread_count = util.define_argument_value(argv, "-thread-count", 4, flag="-tc")

    # 압축 파일 생성 여부
    zip_file = False

    # 계정 및 호스트 정보 None 타입 검사
    if user is None:
        user = "root"
        print("경고: 유저명이 지정되지 않았습니다. root라고 가정합니다.")
    
    if password is None:
        print("경고: 비밀번호가 지정되지 않았습니다. 비밀번호를 콘솔 메세지를 통해 요구될 수 있습니다.")

    if host is None:
        host = "127.0.0.1"
        print("경고: MySQL 서버 주소가 지정되지 않았습니다. localhost라고 가정합니다.")
    
    if port is None:
        port = "3306"
        print("경고: MySQL 서버 포트가 지정되지 않았습니다. 3306번 포트를 사용한다고 가정합니다.")

    if database_name is None:
        database_name = "CVE_DATABASE"
        print("경고: 데이터베이스 이름이 지정되지 않았습니다. 데이터베이스 이름을 'CVE_DATABASE'로 설정합니다.")

    if table_name is None:
        table_name = "DATABASE_TABLE"
        print("경고: 데이터베이스 테이블 이름이 지정되지 않았습니다. 테이블 이름을 'DATABASE_TABLE'로 설정합니다.")

    if content_type is None:
        content_type = "nvd"
        print("경고: 컨텐츠 타입이 지정되지 않았습니다. NVD_NIST로 설정합니다.")

    # 년도 인자값 식별
    year = util.define_argument_value(argv, "-year", flag="-y")
    if year is None:
        if all_years:
            for y in range(2000, 2019):
                list_year.append(y)
            print("모든 년도로 지정되었습니다.")
        else:
            if content_type != 'mitre':
                help("년도가 지정되지 않았습니다: 'year' is missing value")
    else:
        if all_years:
            print("경고: 이미 모든 년도를 대상으로 지정하였습니다. -year 인자값이 무시되었습니다.")
        else:
            try:
                sp = year.split('-')
                for target in range(int(sp[0]), int(sp[1]) + 1):
                    list_year.append(target)
            except:
                if util.isnumber(year) is True:
                    list_year.append(int(year))
                else:
                    help('올바르지 않은 연도 값입니다.')
    if content_type == 'mitre' and len(list_year) != 0:
        print("정보: mitre 리스트에서는 연도 별로 구분하지 않습니다. -year와 관련한 모든 인자값은 무시됩니다.")

    # 출력 파일명 필터
    if len(filename) >= 2:
        print("경고: 출력 파일 이름이 2개 이상 지정되어 있습니다. 2번째 이름 인자부터 값이 무시됩니다.")
        filename = filename[0]
    elif len(filename) == 0:
        print("경고: 출력 파일 이름이 지정되지 않았습니다. 기본 출력 파일명으로 사용합니다.")
        filename = None
    else:
        filename = filename[0]

    # CSV 파일 출력 여부
    if csv_output:
        output_filetype.append(export_file.get("--csv"))

    # SQL 파일 출력 여부 (DB)
    if sql_output:
        output_filetype.append(export_file.get('--db'))

    # .zip 확장자 포함 여부
    if filename.endswith('.zip'):
        zip_file = True
        filename = filename.replace('.zip', '')
    
    # MySQL 데이터베이스 객체 초기화 및 생성
    db = initialize(user, password, host, port)
    print("Connected the MySQL Database {u}@{h}".format(u=user, h=host))
    if db is None:
        raise pymysql.DatabaseError("Something wrong. The initialize of MySQL Object was failed.")

    print("데이터베이스를 생성하는 중: {name} ...".format(name=database_name))
    if db.create_database(database_name):
        print("데이터베이스를 생성하였습니다: {name}".format(name=database_name))


    if content_type == "nvd":
        # NIST 데이터베이스 형식으로 연결
        base = nvdnist.Nvdnist(db)
    elif content_type == "mitre":
        # CVE-MITRE 데이터베이스 형식으로 연결 
        base = cvemitre.Cvemitre(db)
    elif content_type == "icscert":
        # ICS-CERT 데이터베이스 형식으로 연결 
        raise NotImplementedError("ICS-CERT Framework wasn't implemented")
    
    # Use the selected database
    if not base.use_database(database_name):
        print("예상치 못한 오류로 인해 데이터베이스를 사용할 수 없습니다: {name}".format(name=database_name))

    # 테이블 생성
    if not base.create_table(table_name):
        print("테이블 생성에 실패하였습니다: {name}".format(name=table_name))
    else:
       print("테이블을 생성하였습니다: {name}".format(name=table_name))

    # 추출된 결과 파일 경로 리스트
    export_filepath = []

    # 연도 별 CVE 데이터베이스 작업 설정 및 시작
    for year in list_year:
        export_filepath.append(configure_task(base, table_name, year, filename))
    
    if len(output_filetype) != 0:
        for f in output_filetype:
            export_filepath.append(base.export(table_name, f, table_name))
    
    if zip_file:
        print("ZIP output file detected!")
        if len(export_filepath) != 0:
            zip = zipfile.ZipFile(filename + ".zip", 'w')
            for path in export_filepath:
                zip.write(path, compress_type = zipfile.ZIP_DEFLATED)
                os.remove(path)
            zip.close()
            print(filename + ".zip was created and compressed successfully.")
            