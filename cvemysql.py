# -*- coding: utf-8 -*-
import util
import sys
import os
import nvdnist
import platform
import zipfile

# 구성 인자에 대응되는 파일 형식을 정의합니다.
export_file = {'--csv':'csv', '--db':'sql'}

def configure_database(cvetype, year, output_file, output_type):
    """
    cvetype is not used yet. it will up to date.
    """
    nist = nvdnist.Nvdnist("NVD_NIST_{n}".format(n=year))
    result = nist.load(year)
    nist.insert(result)
    output = False
    zip_file = False
    output_filename = []
    if output_type is not None:
        output = True
        if output_file.endswith('.zip'):
            zip_file = True
            output_file = output_file.replace('.zip', '')
        for f in output_type:
            output_filename.append(nist.export(output_file + '_' + str(year), f))

    if output:
        delete = input("Are you want to remove the extracted database? yes/no (recommand): ")
        if delete == 'yes':
            if nist.query("DROP DATABASE " + nist.db_name) is True:
                print("Database removed.")
            else:
                print("Unfortunately the database cannot removed.")
        else:
            print("delete canceled.")
    util.remove_raw_file(nist)
    if zip_file and len(output_filename) is not 0:
        print('ZIP output file name detected. Compressing to a ZIP file')
        zip = zipfile.ZipFile(output_file + ".zip", 'w')
        for path in output_filename:
            zip.write(path, compress_type = zipfile.ZIP_DEFLATED)
            os.remove(path)
        zip.close()
        print((output_file + ".zip was created anhd compressed successfully.")

    if nist.close() is True:
        print("Workstation now terminated")

class CommandException(Exception):
    """ 올바르지 않은 명령어를 입력했을 때 발생하는 예외 처리입니다. """
    def __init__(self, error):
        super().__init__(error)


def help(error=None):
    """ 명령어 도움말을 출력합니다. `error`를 인자값으로 넘겨서 오류 메시지를 출력할 수 있습니다. """
    print("Using Command: python cvemysql.py [-type] [output_file] [--configuration]  ...")
    print('')
    print("Option arguments:")
    print('')
    print("[-type] 데이터베이스 타입을 선택합니다.")
    print("Available type: nvdnist, icscert (not supported yet)")
    print('')
    print("NVD-NIST Option Command:")
    print('')
    print("[-year] CVE 리스트 연도를 설정합니다.")
    print("'-'를 사용하여 해당 연도를 지정해줄 수 있습니다.")
    print('')
    print("Configuration arguments:")
    print('')
    print("[--all] ICS-CERT, NVD-NIST 데이터베이스로 지정합니다.")
    print("[--year-all] 모든 연도를 지정합니다. (NVD-NIST)")
    print("[--db] 데이터베이스 파일로 추출합니다. MySQL 기반에서는 SQL 파일이 기본 확장자입니다.")
    print("[--csv] 데이터베이스에 있는 데이터 값들을 CSV 파일로 추출합니다.")
    print("[--setup-install] 처음 실행할 때 모듈이 정상적으로 작동할 수 있도록 합니다. 처음에만 사용이 권장됩니다.")

    if error is not None:
        raise CommandException(error)

if __name__=="__main__":
    if len(sys.argv) <= 1:
        help('Arguments missing')
    
    yearlist = []
    filetype = []
    cvetype = []

    argv, filename =  util.disting_args(sys.argv[1:], '--all', '--year-all', '--csv', '--db', '--setup-install')
    if util.has_args_filter('--setup-install', argv):
        # --setup-install 구성 인자는 해당 모듈이 정상적으로 작동이 가능한지 확인합니다.
        # 그렇지 않다면, 필요한 모듈 패키지를 가져와 설치합니다.
        try:
            import requests
            import re
            import pymysql
            import getpass
            import csv
            import bs4
            print('Requirement package was already installed.')
        except:
            print('Some packages not found. installing packages')
            os.system('pip install -r requirements.txt')
            print('Initial setting was done.')
            if len(argv) == 1:
                sys.exit(0)

    # 출력 파일 이름이 2번 이상 입력되어 있는지 확인합니다.
    if len(filename) >= 2:
        print('Warning: The output file name has two or more values.')
        filename = filename[0]
    elif len(filename) == 1:
        filename = filename[0]
    else:
        # 출력 파일 이름이 지정되지 않았다면 기본 출력 파일 이름으로 사용합니다.
        print('Warning: Output file name not specified.')
        filename = None

        
    if util.has_args_filter('--all', argv) is True:
        # --all 구성 인자가 있는지 확인합니다.
        # 모든 출력 파일을 사용합니다.
        for v in export_file.values():
            filetype.append(v)
    
    for k in export_file.keys():
        # 출력 파일 타입을 조사합니다.
        # 사용 가능한 파일 타입은 export_file 변수에 dict형으로 정의되어 있습니다.
        if util.has_args_filter(k, argv) is True:
            if k in filetype:
                print('%s is already used filetype, conflicting value' % k)
            else:
                filetype.append(export_file[k])

    if util.has_args_filter('--year-all', argv) is True:
        # --all에 대한 구성 인자가 있는지 확인합니다.
        for v in range(2002, 2019):
            yearlist.append(v)
    
    if util.has_args_filter('-year', argv) is True:
        # -year에 대한 인자값을 식별합니다.
        year = argv.get('-year')
        if len(yearlist) > 0:
            # --year-all 구성 인자가 사용되면 해당 인자값은 필요가 없습니다.
            print('%s is already used for all values argument, conflicting value' % year)
        else:
            try:
                sp = year.split('-')
                for target in range(int(sp[0]), int(sp[1]) + 1):
                    yearlist.append(target)
            except:
                if util.isnumber(year) is True:
                    yearlist.append(int(year))
                else:
                    help('올바르지 않은 연도 값입니다.')
    else:
        if len(yearlist) == 0:
            help('년도가 지정되지 않았습니다.')
    
    if len(filetype) == 0:
        # 파일 타입이 아무것도 지정되어 있지 않으면 기본 파일 타입만 사용합니다.
        filetype.append('sql')

    if len(cvetype) == 0:
        # CVE 타입이 아무것도 지정되어 있지 않으면 기본 CVE 타입만 사용합니다.
        cvetype.append('nvdnist')    
    
    for y in yearlist:
        # 연도별 데이터베이스를 구축합니다.
        plat = platform.system()
        if plat == "Windows":
            os.system("cls")
        else:
            os.system("clear")
        print("===== NVD-NIST {n} list process started =====".format(n=y))
        print('')
        print('')
        print('')
        configure_database(cvetype, y, filename, filetype)
        print('')
        print('')
        print('')
        print("===== NVD-NIST {n} list ended =====".format(n=y))