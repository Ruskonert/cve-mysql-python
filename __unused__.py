# -*- coding: utf-8 -*-
import threading
from threading import Thread

class ThreadList:
    def __init__(self, process):
        self._entry = 0
        self.total = 0
        self._wpList = []
        self.pList = []
        self._coreThread = None
        self._process = None
        self.kill = False
        self.process = process
        self._lock = threading.Lock()

    def _pobject(self):
        self._entry = len(self._wpList)
        self._wpList.reverse()

        while self.kill == False:
            for ps in range(0, self.process):
                try:
                    v = self._wpList.pop()
                    self.pList.append(v)
                except:
                    if len(self._wpList) != 0:
                        self.process = len(self._wpList) % self.process
                        self._pobject()
                    else:
                        self.kill = True
                        break
            
            for p in self.pList:
                p.start()

            for p in self.pList:
                p.join()

            for p in self.pList:
                del p
        
            self.pList.clear()

            if len(self._wpList) == 0:
                self.kill = True

    def _processFunction(self, delay=6.0):
        while True:
            sys.stdout.write("\rCurrent progress: %d / %d" % (self._entry - len(self._wpList), self._entry))
            sys.stdout.flush()
            if self.kill:
                self._lock.release()
                break
            time.sleep(delay)
    
    def start(self):
        self._coreThread = Thread(target=self._pobject)
        self._coreThread.start()
        self._process = Thread(target=self._processFunction)
        self._process.start()
        self._lock.acquire()
            
    def add_thread(self, thread):
        self._wpList.append(thread)