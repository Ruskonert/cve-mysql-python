# -*- coding: utf-8 -*-
from database import *

class Header:
    pass

class TypeInstanceException(Exception):
    def __init__(self, *args, **kwargs):
        super().__init__(args, kwargs)

class CVEDatabase(MysqlBase):
    __metaclass__ = abc.ABCMeta

    def __init__(self, db_name="default"):
        super().__init__(db_name)
        self.rebuild(db_name)

    def default_table(self):
        a1 = Table("_number", "INT PRIMARY KEY AUTO_INCREMENT")
        a2 = Table("CVE", "VARCHAR(24)")
        a3 = Table('CPE', "VARCHAR(56)")
        a4 = Table("Vendor", 'VARCHAR(64)')
        a5 = Table("Product", "VARCHAR(48)")
        a6 = Table("Product_name", "VARCHAR(80)")
        a7 = Table("Version", "VARCHAR(64)")
        a8 = Table("Service_Pack", "VARCHAR(64)")
        a9 = Table("Status", "VARCHAR(10)")
        self.tables = (a1, a2, a3, a4, a5, a6, a7, a8, a9)
        return self.tables

    def build_database(self, value="default"):
        if self.connect():
            if not util.exist_database(self, self.db_name):
                self.create_database(value)
                print('{v} database create successfully'.format(v=value))
            self.set_database(value)
            print('{v} database loaded'.format(v=value))
        else:
            print("Failed build to database '{name}'".format(name=value))
            raise Exception("The Authorization failed. Try again.")

    def rebuild(self, value):
        self.build_database(value)
        self.create_table(self.db_name)

    @abc.abstractmethod
    def attribute(self):
        pass

    @abc.abstractmethod
    def insert(self, obj):
        pass

"""
For debug source code. If you want to it, Remove punctuation marks.

if __name__ == "__main__":
    ic = CVEDatabase()
    ic.build_database()
    query_string = ic.create_table('icscert_table', query_execute=False)
    ic.query(query_string)
    print("Now executed: {q}".format(q=query_string))
"""
