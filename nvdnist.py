# -*- coding: utf-8 -*-
import cve
import util
import json
import os
import traceback

class NvdnistHeader(cve.Header):
    """
    The element of NVD-NIST table
    """
    def __init__(self, cve_id, cpe, vendor, product, version, product_name, service_pack, status="Submitted"):
        """
        The constructor of Header.

          :param cve_id: CVE Number
          :param cpe: Common Product Enumeration
          :param vendor: Vendor (Company name)
          :param product: Product type (ex: Software name, os name ...)
          :param version: Product version
        """
        self.CVE = cve_id
        self.CPE = cpe
        self.Vendor = vendor
        self.Product = product
        self.Version = version
        self.Product_name = product_name
        self.Service_pack = service_pack
        self.Status = status


class Nvdnist(cve.CVEDatabase):
    NVD_NIST_JSON_URL = 'https://nvd.nist.gov/feeds/json/cve/1.0/'
    """
    """

    NVD_NIST_XML_URL = "https://nvd.nist.gov/feeds/xml/cve/2.0/"
    """
    """

    def __init__(self, db):
        super().__init__(db)
        self.header = None
        self.last_updated = None

    def attribute(self):
        pass

    def insert(self, obj):
        query_s = "INSERT INTO "
        query_s += self.target_table_name + '('
        format_string = ""
        for table in self.tables:
            if not table.name == '_number':
                query_s += table.name + ","
                format_string += "%s,"
        query_s = query_s[:-1] + ") values (" + format_string[:-1] + ")"
        print("Inserting the values to database ...")
        err = 0
        inserted = 0
        for element in obj:
            if element.Version is None:
                element.Version = ""
            if element.Status is None:
                element.Status = "SUBMITTED"
            if element.Service_pack is None:
                element.Service_pack = ""
            if self.query(query_s, (
                    element.CVE, element.CPE, element.Vendor, element.Product, element.Product_name, element.Version,
                    element.Service_pack, element.Status)) is False:
                print("Failed insert the element data: %s" % element.__str__())
                err = err + 1
            else:
                inserted = inserted + 1
        print("Inserted values sucessful.")
        print("result => sucessed: %d, failed: %d" % (inserted, err))
        

    def load(self, target_year, filetype="json"):
        cve_product = None
        cve_version = None
        cve_product_name = None
        filename = None
        url = None
        if filetype == "json":
            url = self.NVD_NIST_JSON_URL
            filename = "nvdcve-1.0-{year}.json.zip".format(year=target_year)
        elif filetype == "xml":
            # Not support yet.
            url = self.NVD_NIST_XML_URL
            filename = "nvdcve-2.0-{year}.xml.zip".format(year=target_year)
            raise NotImplementedError("XML_FILE is not supported yet")

        target_url = url + filename
        util.downloadfrom(target_url)
        decompress_file = filename.replace(".zip", "")

        if os.path.exists(decompress_file) is False:
            util.extract(filename, "./")
        
        self.raw_file = decompress_file
        json_data = open(decompress_file, encoding='utf8').read()

        js = json.loads(json_data)
        result = []
        js_element = js['CVE_Items']
        print("The scanning to NVD-NIST database started")
        print('Analyzing total of %d CVE element(s) ...' % len(js_element))
        for cve_element in js_element:
            cve_vendor = None
            cve_service_pack = None
            cve_status = None
            cve_data_meta = cve_element["cve"]
            if '** REJECT **' in cve_data_meta['description']['description_data'][0]['value']:
                cve_status = "REJECTED"

            affect_products = cve_data_meta["affects"]['vendor']['vendor_data']
            cve_id = cve_data_meta['CVE_data_meta']['ID']
            affect_products_cpe_list = []
            try:
                for c in affect_products:
                    cve_vendor = c['vendor_name']
                    for products_cpe in cve_element["configurations"]['nodes']:
                        target_cpe = None
                        if 'cpe' in products_cpe:
                            target_cpe = products_cpe['cpe']
                        elif 'children' in products_cpe:
                            target_cpe = products_cpe['children']

                        for product in target_cpe:
                            if 'vulnerable' not in product:
                                product = product['cpe']

                            if 'vulnerable' not in product:
                                product = product[0]

                            if product['vulnerable'] is True:
                                affect_products_cpe_list.append(product['cpe22Uri'])
                for cpe in affect_products_cpe_list:
                    splited = cpe.split(':')
                    cve_product = {
                        '/a': "Software",
                        '/o': "Operation System (PC)",
                        '/h': "Hardware"
                    }.get(splited[1], "Unknown")

                    cve_product_name = splited[3]

                    if len(splited) >= 5:
                        cve_version = splited[4]
                    if len(splited) >= 6:
                        cve_service_pack = splited[5]

            except IndexError:
                traceback.print_exc()
            except KeyError:
                traceback.print_exc()
            except TypeError:
                traceback.print_exc()

            nvdnist_element = NvdnistHeader(cve_id, None, cve_vendor, cve_product, cve_version, cve_product_name,
                                            cve_service_pack, cve_status)

            if nvdnist_element.Product_name is not None:
                nvdnist_element.CPE = "cpe://" + nvdnist_element.Product_name.split('_')[0]
            else:
                nvdnist_element.CPE = "cpe://unknown"

            result.append(nvdnist_element)
        print('Analyzed %d CVE element(s)' % len(result))
        return result


if __name__ == "__main__":
    nvdnist = Nvdnist()
    result = nvdnist.load(2006)
    nvdnist.insert(result)
    nvdnist.export("nvd_nist_2006", "csv")