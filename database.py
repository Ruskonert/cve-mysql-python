# -*- coding: utf-8 -*-
import abc
import getpass
import util
import pymysql
import subprocess
import csv

class Table:
    def __init__(self, name, option):
        self.name = name
        self.option = option


class MysqlBase:
    __metaclass__ = abc.ABCMeta

    def __init__(self, use_db=None):
        self.db_name = use_db
        self.conn = None
        self.output = None
        self.cur = None
        self.tables = None
        self.target_table_name = None


    def direct_connect(self, username, pwd, host='localhost', port=3306, char='utf8'):
        try:
            self.conn = pymysql.connect(host=host, user=username, passwd=pwd, port=port, charset=char)
            self.cur = self.conn.cursor(pymysql.cursors.DictCursor)
            return True
        except Exception as e:
            raise Exception("Failed connect: %s" % e)


    def create_table(self, table_name, table_str=None, query_execute=True):
        query = None
        try:
            self.checkdb(True)
            query = "CREATE TABLE "
            if table_name is None:
                raise TypeError("The variable 'table_name' must be str")
            query += table_name
            if table_str is None:
                table_str = util.table_to_query(self.default_table())
                table_str = "({table})".format(table=table_str)
                query += table_str
            self.target_table_name = table_name
            if not query_execute:
                return query
            else:
                if util.exist_table(self, table_name) is True:
                    print("Already existed the table: '{q}'".format(q=query))
                    return True
                return self.query(query)
        except Exception as e:
            print("Failed creating table: '{q}', Reason: ".format(q=query), end='', flush=True)
            print(e)

    @abc.abstractmethod
    def default_table(self):
        pass

    @abc.abstractmethod
    def build_database(self, value):
        pass

    def connect(self):
        print('Please input your identities to connect the database.')
        usr = input('username: ')
        pwd = getpass.getpass('password: ')
        address = input('address (default - localhost): ')
        p = input('port (default - 3306): ')
        if p == '':
            p = 3306
        return self.direct_connect(usr, pwd, address, port=p)

    def checkdb(self, chkdb=False):
        if self.conn is None:
            raise pymysql.DatabaseError('Not connected the database. Please connect() at first')
        if chkdb:
            if self.db_name is None:
                raise pymysql.DatabaseError(
                    'What is use to database? Please use function set_database() or Execute the query string manually.')

    def query(self, query, o=None):
        try:
            self.checkdb()
            if o is None:
                self.cur.execute(query)
            else:
                self.cur.execute(query, o)
            self.conn.commit()
            return True
        except Exception as e:
            print("Failed executing query: '%s', Reason: " % query, end='', flush=True)
            print(e)
            return False

    def close(self):
        try:
            self.checkdb()
            self.cur.close()
            self.conn.close()
            return True
        except Exception as e:
            print("Failed closed, Reason: ", end='', flush=True)
            print(e)
            return False

    def set_database(self, name):
        if self.query("USE %s" % name):
            self.db_name = name

    def create_database(self, name, not_exist=True):
        query = "CREATE DATABASE"
        if not_exist:
            not_exist = " IF NOT EXISTS "
        else:
            not_exist = None

        if not_exist is not None:
            query += not_exist

        query += name
        return self.query(query)

    def export(self, to, filetype='sql'):
        vaild = {
            "sql": True,
            "csv": True
        }.get(filetype, False)

        if vaild is True:
            filename = to + "." + filetype
            if filetype == "csv":
                print("Exporting to file: %s" % filename)
                if self.query('SELECT * FROM {table_name}'.format(table_name=self.target_table_name)) is True:
                    fs = open(filename, 'w')
                    f = csv.writer(fs, lineterminator='\n')
                    schema = []
                    fetch = self.cur.fetchall()
                    for e in fetch[0].keys():
                        schema.append(e)
                    f.writerow(schema)

                    for es in fetch:
                        schema = []
                        for k in es.keys():
                            if "__len__" in k:
                                continue
                            schema.append(es[k])
                        f.writerow(schema)
                    fs.flush()
                    fs.close()
                    print("Sucessfully make the export file: %s" % filename)
                else:
                    raise Exception()
                    print("Failed make the export file: %s" % filename)
            else:
                print('')
                print('')
                print('')
                print("Exporting to file: %s" % filename)
                print('Please input your identities to export sql.')
                usr = input('username: ')
                address = input('address (default - localhost): ')
                password = getpass.getpass('password: ')
                if address == '':
                    address ='localhost'
                ps = subprocess.Popen("mysqldump -u {user} -p{pwd} -h {host} {database_name} > {output}".format(
                    pwd=password, user=usr,host=address, database_name=self.db_name.lower(), output=filename), shell=True)
                ps.communicate()
                if ps.returncode == 0:
                    print("Sucessfully make the export file: %s" % filename)
                else:
                    raise
                    print("Failed make the export file: %s" % filename)
        else:
            print("Filetype failed. Available: [sql, csv]")