# -*- coding: utf-8 -*-
import json
import os
import sys
import requests
import database
import zipfile


def extract(path, to, delete=True):
    print("Decompressing zip file: %s" % path)
    zip = zipfile.ZipFile(path)
    zip.extractall(to)
    print("Decompressed file successfully.")
    zip.close()
    if delete:
        os.remove(path)

def is_argument_value(v):
    """ `v`의 문자열 값이 구성/선택 인자값인지 구별합니다. """
    return v.startswith('-')
	
def isnumber(obj):
    """ `obj`가 숫자 형식인지 확인합니다. """
    try:
        int(obj)
        return True
    except:
        return False


def has_args_filter(value, f):
    """ `value`가 `filter` 안에 있는 값인지에 대해 안전한 검사를 합니다. """
    try:
        if isinstance(f, dict) is True:
            do = f[value]
        else:
            f.index(value)
        return True
    except:
        return False


def argv_dict(it, current):
    """
    iterable형을 가진 인자 `it`에서 현재 `current`번째를 기준으로 하는 인자에 대해서 해당 인자값에 
    대응되는 값이 있는지 안전하게 확인합니다.
    """
    try:
        if is_argument_value(it[current + 1]) is True:
            return None
        else:
            return it[current + 1]
    except IndexError:
        return None


def disting_args(args, *it, path_ignored=True):
    """
    구성/선택 인자값을 `args`를 통해 값을 식별합니다.
     `it` 인자 값은 인자에 대응되지 않는 옵션 인자로, 이 인자들은 별도의 값에 대응하지 않아도 `True` 값으로 간주합니다.
    """
    kv = {}
    unknown = []
    for i, v in enumerate(args):
        if i == 0:
            if is_argument_value(v) is False:
                unknown.append(v)
            else:
                if has_args_filter(v, it) is True:
                    kv[v] = True
                else:
                    kv[v] = argv_dict(args, i)
        else:
            if is_argument_value(v) is True:
                if has_args_filter(v, it) is True:
                    kv[v] = True
                else:
                    kv[v] = argv_dict(args, i)
            else:
                if kv.get(args[i - 1]) is v:
                    continue
                else:
                    unknown.append(v)
                    
    if path_ignored is False:
        unknown = sys.argv[:1] + unknown
    return kv, unknown


def downloadfrom(url, output=None, filetype=None, ignore_exist=False, output_log=True):
    if len(url) == 0 or url is None:
        print("Can't download because the parameter 'url' is emptry or None")
        return None

    if output is None:
        """ """
        output = url.split('/')[-1]

    if filetype is None:
        """  """
        filetype = url.split('.')[-1]

    fvaild = __check__
    try:
        fvaild = getattr(sys.modules[__name__], 'vaild{ftype}'.format(ftype=filetype))
    except:
        if output_log:
            print("WARNING: filetype check function is not defined '%s'" % filetype)

    if os.path.exists(output) is True:
        if fvaild(output) is False:
            if output_log:
                print("{file}'s invaild {ftype} format, Remove it".format(file=output, ftype=filetype))
            os.remove(output)
        else:
            if output_log:
                print('{file} was already existed, Skip downloading the file'.format(file=output))
            return output

    resp = requests.get(url)

    f = None
    with open(output, "wb") as file:
        file.write(resp.content)
        f = file
        f.close()
    if fvaild(output) is True:
        if output_log:
            print('download done.')
        return f.name
    else:
        if output_log:
            print('The download process is complete but maybe invaild file or incomplete. Please try again.')
        return None


def __check__(obj):
    return obj is not None


def table_to_query(tables):
    querystring = ''
    for element in tables:
        if type(element) == database.Table:
            querystring += '{name} {option}'.format(name=element.name, option=element.option)
        elif type(element) == str:
            querystring += element
        else:
            print('Unknown type: {e} - Passed'.format(e=type(element).__str__))
        querystring += ','
    # remove column character
    return querystring[:-1]


def exist_table(target, table):
    if isinstance(target, database.MysqlBase):
        target.query("SHOW tables")
        for ele in target.cur:
            if list(ele.keys())[0].replace('Tables_in_', '').lower() == table.lower():
                return True
        return False
    else:
        raise TypeError("The variable 'target' must be instance of database.MysqlBase, Your parameter type: {t}".format(
            t=type(target).__str__))


def exist_database(target, dbname):
    if isinstance(target, database.MysqlBase):
        try:
            target.query("SHOW DATABASES")
            for ele in target.cur:
                if ele['Database'] == dbname:
                    return True
            return False
        except Exception as e:
            print(e)
            return False
    else:
        raise TypeError("The variable 'target' must be instance of database.MysqlBase, Your parameter type: {t}".format(
            t=type(target).__str__))


def vaildjson(filepath):
    try:
        fs = open(filepath, 'r')
        json.load(fs)
        fs.close()
        return True
    except:
        return False


def vaildzip(filepath):
    return zipfile.is_zipfile(filepath)


def vaildxml(filepath):
    xml_standard = '<?xml version='
    f = open(filepath, 'r')
    fstr = f.readline()
    f.close()
    return fstr.startswith(xml_standard)
